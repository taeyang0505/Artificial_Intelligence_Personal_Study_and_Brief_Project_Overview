import codecademylib3_seaborn
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from svm_visualization import draw_boundary
from players import aaron_judge, jose_altuve, david_ortiz

fig, ax = plt.subplots()

print(aaron_judge.columns)
print(aaron_judge.description.unique())
print(aaron_judge.type.unique())

aaron_judge['type'] = aaron_judge['type'].map({'S': 1, 'B': 0})
print(aaron_judge['type'])
print(aaron_judge['plate_x'])

aaron_judge = aaron_judge.dropna(subset = ['plate_x', 'plate_z', 'type'])

plt.scatter(x = aaron_judge['plate_x'], y = aaron_judge['plate_z'], c = aaron_judge['type'], cmap = plt.cm.coolwarm, alpha = 0.25)
training_set, validation_set = train_test_split(aaron_judge, random_state=1)
classifier = SVC(kernel = 'rbf', gamma = 4, C = 1)
classifier.fit(training_set[['plate_x', 'plate_z']], training_set['type'])
draw_boundary(ax, classifier)
print(classifier.score(validation_set[['plate_x', 'plate_z']], validation_set['type']))
plt.show()

best_accuracy = 0
best_gamma = 0
best_C = 0

for gamma in [0.1, 1, 3, 10]:
    for C in [0.1, 1, 3, 10]:
        classifier = SVC(kernel='rbf', gamma=gamma, C=C)
        classifier.fit(training_set[['plate_x', 'plate_z']], training_set['type'])
        accuracy = classifier.score(validation_set[['plate_x', 'plate_z']], validation_set['type'])
        print(f"Gamma: {gamma}, C: {C}, Accuracy: {accuracy}")
        
        if accuracy > best_accuracy:
            best_accuracy = accuracy
            best_gamma = gamma
            best_C = C

print(f"Best Gamma: {best_gamma}, Best C: {best_C}, Best Accuracy: {best_accuracy}")

def plot_strike_zone(data):
    fig, ax = plt.subplots()
    # Map 'X' to NaN and then drop NaN values
    data['type'] = data['type'].map({'S': 1, 'B': 0, 'X': None})
    data = data.dropna(subset=['plate_x', 'plate_z', 'type'])
    plt.scatter(x=data['plate_x'], y=data['plate_z'], c=data['type'], cmap=plt.cm.coolwarm, alpha=0.25)
    training_set, validation_set = train_test_split(data, random_state=1)
    classifier = SVC(kernel='rbf', gamma=3, C=1)
    classifier.fit(training_set[['plate_x', 'plate_z']], training_set['type'])
    draw_boundary(ax, classifier)
    print(classifier.score(validation_set[['plate_x', 'plate_z']], validation_set['type']))
    ax.set_ylim(-2, 6)
    ax.set_xlim(-3, 3)
    plt.show()

plot_strike_zone(jose_altuve)




