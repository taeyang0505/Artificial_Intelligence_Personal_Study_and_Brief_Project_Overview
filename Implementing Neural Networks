import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
from sklearn.compose import ColumnTransformer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import InputLayer
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# data loading and observing
dataset = pd.read_csv('life_expectancy.csv')
print(dataset.head())
print(dataset.describe())

dataset = dataset.drop(['Country'], axis=1)

labels = dataset.iloc[:, -1]
features = dataset.iloc[:, 0:-1]

# data preprocessing
# one-hot-encoding : convert categorical columns into numerical colummns
features = pd.get_dummies(features)

# split data into training set and test sets
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.20, random_state=23)

# standardize/normalize numerical features
numerical_features = features.select_dtypes(include=['float64', 'int64'])
numerical_columns = numerical_features.columns

ct = ColumnTransformer([("only numeric", StandardScaler(), numerical_columns)], remainder='passthrough')

features_train_scaled = ct.fit_transform(features_train)
features_test_scaled = ct.transform(features_test)

# creating Sequential model and adding layers
my_model = Sequential()
input = InputLayer(input_shape = (features.shape[1], ))
my_model.add(input)                       # input layer
my_model.add(Dense(64, activation='relu'))  # hidden layer
my_model.add(Dense(1))                    # output layer
print(my_model.summary())

# initializing optimzer and compiling model
opt = Adam(learning_rate=0.01)
my_model.compile(loss='mse', metrics=['mae'], optimizer=opt)
my_model.fit(features_train_scaled, labels_train, epochs=40, batch_size=1, verbose=1)

# evaluate trained model on the preprocessed test data set and test labels
rse_mse, res_mae = my_model.evaluate(features_test_scaled, labels_test, verbose=0)
print(res_mse, res_mae)
